home <- head(readLines("MOV/listhome.txt"))
server <- head(readLines("MOV/list_server.txt"))
length(home)
server <- readLines("MOV/list_server.txt")
home <- readLines("MOV/listhome.txt")
length(server)
length(home)
home[home %in% server]
home[home !%in% server]
home[!(home %in% server)]
server[!(server %in% home)]
home[!home %in% server)]
home[!home %in% server]
grepl(pattern = "Transcendence", x = home)
home[grepl(pattern = "Transcendence", x = home)]
server[grepl(pattern = "Transcendence", x = server)]
home[home !%in% server]
home[!home %in% server)]
home[!home %in% server]
inc.home <- home[!home %in% server]
inc.serv <- server[!server %in% home]
inc.home
gsub(pattern = (.+)\\(, replacement = \\1)
gsub(pattern = (.+)\\(, replacement = "\\1")
gsub(pattern = "(.+)\\(", replacement = "\\1")
gsub(pattern = "(.+)\\(", replacement = "\\1", x = inc.home)
gsub(pattern = "(.+)\\(\\d+\\)", replacement = "\\1", x = inc.home)
gsub(pattern = "(^.+)\\(.+$", replacement = "\\1", x = inc.home)
gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.home)
#Generate home patterns
home.pat <- gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.home)
home.pat
gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.serv)
home.pat <- gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.home)
#Generate server patterns
server.pat <- gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.serv)
inc.home
data.table("pattern" = home.pat, "home" = inc.home)
dt.home <- data.table("pattern" = home.pat, "home" = inc.home)
dt.home[, serveur := server[grepl(pattern = pattern, x = server)]]
dt.home
dt.home <- data.table("pattern" = home.pat, "home" = inc.home)
dt.home[, serveur := lapply(X = pattern, FUN = function(i){
server[grepl(pattern = i, x = server)]})]
dt.home
dt.home[,c(2,3),]
fwrite(x = dt.home[, c(2, 3), ],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t")
fwrite(x = dt.home[, c(2, 3), ],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t\t\t\t")
fwrite(x = dt.home[, c(2, 3), ],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t   ")
fwrite(x = dt.home[, c(2, 3), ],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t")
#Load files listing content
server <- readLines("MOV/list_server.txt")
home <- readLines("MOV/listhome.txt")
#Check for inconsistencies (what is in home but not in server)
inc.home <- home[!home %in% server]
#Check for inconsistencies (what is in server but not in home)
inc.serv <- server[!server %in% home]
#Generate home patterns
home.pat <- gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.home)
#Generate server patterns
server.pat <- gsub(pattern = "(^.+)\\s\\(.+$", replacement = "\\1", x = inc.serv)
#Create table of inconsistencies
dt.home <- data.table("pattern" = home.pat, "HOME" = inc.home)
dt.home[, SERVEUR := lapply(X = pattern, FUN = function(i){
server[grepl(pattern = i, x = server)]})]
fwrite(x = dt.home[, c(2, 3), ],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t")
dt.home[, c(2, 3), ]
dt.home[, c(2, 3), ][order(HOME)]
fwrite(x = dt.home[, c(2, 3), ][order(HOME)],
file = "MOV/home_to_server_inconsistencies.tsv", sep = "\t")
(6 - mean(c(1:7)))/sd(c(1:7))
(7 - mean(c(1:7)))/sd(c(1:7))
(1 - mean(c(1:7)))/sd(c(1:7))
(1 - mean(c(1:5)))/sd(c(1:5))
(5 - mean(c(1:5)))/sd(c(1:5))
(6 - mean(c(1:7)))/sd(c(1:7))
(7 - mean(c(1:7)))/sd(c(1:7))
(1 - mean(c(1:7)))/sd(c(1:7))
(6 - mean(c(1:7)))/sd(c(1:7))
(6 - 1)/(7-1)
(7 - 1)/(7-1)
(1 - 1)/(7-1)
(6 - 1)/(7-1)
(1 - mean(c(1:7)))/sd(c(1:7))
(7 - mean(c(1:7)))/sd(c(1:7))
(2 - mean(c(1:10)))/sd(c(1:10))
(2-1)/(7-1)
cor.test(x = 0, y = 0)
cor.test(x = c(1,2,3,1,1,1) y = c(1,1,1,1,1,1))
cor.test(x = c(1,2,3,1,1,1), y = c(1,1,1,1,1,1))
cor.test(x = c(1,2,3,1,1,1,1,1,1,1,1,1,1), y = c(1,1,1,1,1,1,1,1,1,1,1,1,1))
?cor.test
cor.test(x = c(1,2,3,1,1,1,1,1,1,1,1,1,1), y = c(1,1,1,1,1,1,1,1,1,1,1,1,1), method = "pearson")
library(data.table)
library(ggplot2)
dt.data <- data.table(
"data.covered" = c(10, 15, 50, 40),
"sample.amount" = c(1, 2, 3, 4))
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = "bottom") +
geom_bar(data = dt.data,
mapping = aes(x = 0, y = data.covered, fill = sample.amount),
stat = "identity") +
scale_y_continuous(
expand = c(0, 0),
breaks = seq(0, 120, length.out = 15),
labels = function(x) format(x, digits = 2, scientific = TRUE),
sec.axis = sec_axis(
trans = ~.,
breaks = 35,
labels = "label test")) +
scale_x_continuous(expand = c(0, 0))
sessionInfo()
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c("data.table", "seqinr", "hoardeR")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/convert_NCBI_BLAST_XML_results_into_datatable.R")
subtelomere_blasts <- aggregate_NCBI_BLAST_XMLs2DT(
dir.to.xmls = "PCAWG_Paper/data/hg19_annotations/subtelomeres_BLAST_results/",
ncores = 15)
##IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c("data.table", "seqinr", "hoardeR")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/convert_NCBI_BLAST_XML_results_into_datatable.R")
##PARAMETERS
#Load hg19 genomic gap annotation
gaps <- fread("PCAWG_Paper/data/hg19_annotations/gap.txt.gz")
colnames(gaps)[2:4] <- c("chromosomes", "start", "end")
#Keep telomeres and centromeres
telomeres <- gaps[V8 == "telomere", c(2:4), ]
#No Telomeres annotated in hg19 on chr 17:
# https://www.biostars.org/p/76193/#76324
# https://www.biostars.org/p/72730/
# https://www.ncbi.nlm.nih.gov/grc/human/issues/HG-1049
# https://www.nature.com/articles/ng0198-76
centromeres <- gaps[V8 == "centromere", c(2:4), ]
#Load Subtelomeric annotations
#Sources:
# https://genome.cshlp.org/content/suppl/2014/04/16/gr.166983.113.DC1/Supplemental_FileS1.txt
# https://genome.cshlp.org/content/24/6/1039/suppl/DC1
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4032850/
subtemolere.fasta <- read.fasta(
file = "PCAWG_Paper/data/hg19_annotations/Supplemental_FileS1.txt",
as.string = TRUE, forceDNAtolower = FALSE, whole.header = TRUE)
#Get 50bp at both extremities of the subtelomeres sequences
subtel_extremities <- lapply(X = subtemolere.fasta, FUN = function(i){
#Get distal part of the sequence (closest to telomeres)
distal <- as.character(substr(x = i, start = 1, stop = 50))
#Get proximal part of the sequence (farthest from telomeres)
proximal <- as.character(substr(x = i, start = nchar(i)-49, stop = nchar(i)))
list("dist" = distal, "prox" = proximal)
})
subtel_extremities$`7qtel_1-500K_1_12_12`
?blastSeq
subtel_extremities
subtel_extremities[1:3]
lapply(X = subtel_extremities[1:3], FUN = `[`)
lapply(X = subtel_extremities[1:3], FUN = `[[`, 1)
test.ls.seq <- lapply(X = subtel_extremities[1:3], FUN = `[[`, 1)
ls.seq <- list(
"7qtel" = "CCCTAACACTGTTAGGGTTATTATGTTGACTGTTCTCATTGCTGTCTTAG",
"1ptel" = "GATCCTTGAAGCGCCCCCAAGGGCATCTTCTCAAAGTTGGATGTGTGCAT",
"17qtel" = "CCCTAACCCTAAACCCTAGCCCTAGCCCTAGCCCTAGCCCTAGCCCTAGC")
submit_NCBI_BLAST <- function(
seq.list, res.dir, delay.req = 10, email,
db = "genomic/9606/GCF_000001405.25"){
res <- lapply(X = seq_along(seq.list), FUN = function(i){
cat(paste0("BLASTing ", names(seq.list)[i],":\n"))
cat(paste0("\tBLASTing distal subsequence..."))
dist.dir <- file.path(res.dir, names(seq.list)[i])
if(!file.exists(dist.dir)){
blast_request <- hoardeR::blastSeq(
seq = seq.list[[i]]$dist, delay_req = delay.req, email = email,
database = db, #NCBI GRCh37/hg19 database
logFolder = dist.dir, xmlFolder = dist.dir)
} else { blast_request <- "Already processed" }
cat(paste0("Done.\n"))
return(blast_request)
})
}
submit_NCBI_BLAST(
seq.list = ls.seq, res.dir = "~/result_directory",
email = myemailadress@dkfz.de, db = "genomic/9606/GCF_000001405.25")
submit_NCBI_BLAST(
seq.list = ls.seq, res.dir = "~/result_directory",
email = "myemailadress@dkfz.de", db = "genomic/9606/GCF_000001405.25")
seq.list = ls.seq
res.dir = "~/result_directory"
email = "myemailadress@dkfz.de"
db = "genomic/9606/GCF_000001405.25"
seq_along(seq.list)
i = 1
cat(paste0("BLASTing ", names(seq.list)[i],":\n"))
file.path(res.dir, names(seq.list)[i])
dist.dir <- file.path(res.dir, names(seq.list)[i])
!file.exists(dist.dir)
!file.exists(res.dir)
dir.create(res.dir)
submit_NCBI_BLAST <- function(
seq.list, res.dir, delay.req = 10, email,
db = "genomic/9606/GCF_000001405.25"){
if(!file.exists(res.dir)){ dir.create(res.dir) }
res <- lapply(X = seq_along(seq.list), FUN = function(i){
cat(paste0("BLASTing ", names(seq.list)[i],":\n"))
dist.dir <- file.path(res.dir, names(seq.list)[i])
if(!file.exists(dist.dir)){
blast_request <- hoardeR::blastSeq(
seq = seq.list[[i]]$dist, delay_req = delay.req, email = email,
database = db, #NCBI GRCh37/hg19 database
logFolder = dist.dir, xmlFolder = dist.dir)
} else { blast_request <- "Already processed" }
cat(paste0("Done.\n"))
return(blast_request)
})
}
ls.seq <- list(
"7qtel" = "CCCTAACACTGTTAGGGTTATTATGTTGACTGTTCTCATTGCTGTCTTAG",
"1ptel" = "GATCCTTGAAGCGCCCCCAAGGGCATCTTCTCAAAGTTGGATGTGTGCAT",
"17qtel" = "CCCTAACCCTAAACCCTAGCCCTAGCCCTAGCCCTAGCCCTAGCCCTAGC")
submit_NCBI_BLAST(
seq.list = ls.seq, res.dir = "~/result_directory",
email = "myemailadress@dkfz.de", db = "genomic/9606/GCF_000001405.25")
submit_NCBI_BLAST <- function(
seq.list, res.dir, delay.req = 10, email,
db = "genomic/9606/GCF_000001405.25"){
if(!file.exists(res.dir)){ dir.create(res.dir) }
res <- lapply(X = seq_along(seq.list), FUN = function(i){
cat(paste0("BLASTing ", names(seq.list)[i],":\n"))
dist.dir <- file.path(res.dir, names(seq.list)[i])
if(!file.exists(dist.dir)){
blast_request <- hoardeR::blastSeq(
seq = seq.list[[i]], delay_req = delay.req, email = email,
database = db, logFolder = dist.dir, xmlFolder = dist.dir)
} else { blast_request <- "Already processed" }
cat(paste0("Done.\n"))
return(blast_request)
})
}
ls.seq <- list(
"7qtel" = "CCCTAACACTGTTAGGGTTATTATGTTGACTGTTCTCATTGCTGTCTTAG",
"1ptel" = "GATCCTTGAAGCGCCCCCAAGGGCATCTTCTCAAAGTTGGATGTGTGCAT",
"17qtel" = "CCCTAACCCTAAACCCTAGCCCTAGCCCTAGCCCTAGCCCTAGCCCTAGC")
submit_NCBI_BLAST(
seq.list = ls.seq, res.dir = "~/result_directory",
email = "myemailadress@dkfz.de", db = "genomic/9606/GCF_000001405.25")
submit_NCBI_BLAST(
seq.list = ls.seq, res.dir = "~/result_directory",
email = "myemailadress@dkfz.de", db = "genomic/9606/GCF_000001405.25")
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c("data.table", "hoardeR", "NCBI.BLAST2DT")
invisible(lapply(Imports, library, character.only = T))
gaps <- fread("PCAWG_Paper/data/hg19_annotations/gap.txt.gz")
colnames(gaps)[2:4] <- c("chromosomes", "start", "end")
#Keep telomeres and centromeres
telomeres <- gaps[V8 == "telomere", c(2:4), ]
#No Telomeres annotated in hg19 on chr 17:
# https://www.biostars.org/p/76193/#76324
# https://www.biostars.org/p/72730/
# https://www.ncbi.nlm.nih.gov/grc/human/issues/HG-1049
# https://www.nature.com/articles/ng0198-76
centromeres <- gaps[V8 == "centromere", c(2:4), ]
read.fasta(
file = "PCAWG_Paper/data/hg19_annotations/Supplemental_FileS1.txt",
as.string = TRUE, forceDNAtolower = FALSE, whole.header = TRUE)
Imports = c("data.table", "seqinr", "hoardeR", "NCBI.BLAST2DT")
invisible(lapply(Imports, library, character.only = T))
gaps <- fread("PCAWG_Paper/data/hg19_annotations/gap.txt.gz")
colnames(gaps)[2:4] <- c("chromosomes", "start", "end")
#Keep telomeres and centromeres
telomeres <- gaps[V8 == "telomere", c(2:4), ]
#No Telomeres annotated in hg19 on chr 17:
# https://www.biostars.org/p/76193/#76324
# https://www.biostars.org/p/72730/
# https://www.ncbi.nlm.nih.gov/grc/human/issues/HG-1049
# https://www.nature.com/articles/ng0198-76
centromeres <- gaps[V8 == "centromere", c(2:4), ]
#Load Subtelomeric annotations
#Sources:
# https://genome.cshlp.org/content/suppl/2014/04/16/gr.166983.113.DC1/Supplemental_FileS1.txt
# https://genome.cshlp.org/content/24/6/1039/suppl/DC1
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4032850/
subtemolere.fasta <- read.fasta(
file = "PCAWG_Paper/data/hg19_annotations/Supplemental_FileS1.txt",
as.string = TRUE, forceDNAtolower = FALSE, whole.header = TRUE)
#Get 50bp at both extremities of the subtelomeres sequences
subtel_extremities <- lapply(X = subtemolere.fasta, FUN = function(i){
#Get distal part of the sequence (closest to telomeres)
distal <- as.character(substr(x = i, start = 1, stop = 50))
#Get proximal part of the sequence (farthest from telomeres)
proximal <- as.character(substr(x = i, start = nchar(i)-49, stop = nchar(i)))
list("dist" = distal, "prox" = proximal)
})
subtelomere_blasts <- aggregate_NCBI_BLAST_XMLs2DT(
dir.to.xmls = "PCAWG_Paper/data/hg19_annotations/subtelomeres_BLAST_results/",
ncores = 15)
subtelomere_blasts <- subtelomere_blasts[
grepl(pattern = "[0-9XY], GRCh37.p13 Primary Assembly$", x = hits_def)]
#Get hits_def in Y chromosome for "XpYptel" sequence
XpYptel.hits.in.Y <- subtelomere_blasts[file_name %like% "XpYptel" & gsub(
pattern = "^Homo sapiens chromosome (\\d*[0-9XY]), GRCh37.p13 Primary Assembly",
replacement = "\\1", x = hits_def) == "Y"]
#Only keep chromosome matching between file_name and hits_def
subtelomere_blasts <- subtelomere_blasts[
gsub(pattern = "(pY|*)[pq]tel(_short|*)_1(-|_)500[K]*(_new|shortallele|*)_[14]_(12|3)_12(v2|*)_(hg19orientation_|*)(proximal|distal)\\/1.xml$",
replacement = "", x = file_name) == gsub(
pattern = "^Homo sapiens chromosome (\\d*[0-9XY]), GRCh37.p13 Primary Assembly",
replacement = "\\1", x = hits_def)]
#Add XpYptel.hits.in.Y to subtelomere_blasts
subtelomere_blasts <- rbind(subtelomere_blasts, XpYptel.hits.in.Y)
#Order rows by score of alignment
subtelomere_blasts <- subtelomere_blasts[order(-score), .SD, by = "file_name"]
#Keep all hits with maximum score for each query
subtelomere_blasts <- subtelomere_blasts[, .SD[score == max(score)], by = "file_name"]
subtelomere_blasts
#Get chromosome name
subtelomere_blasts[, chromosome := gsub(
pattern = "^Homo sapiens chromosome (\\d*[0-9XY]), GRCh37.p13 Primary Assembly",
replacement = "chr\\1", x = hits_def)]
#Get chromosome arm information
subtelomere_blasts[, arm := gsub(
pattern = "^[0-9XY]\\d*(pY|*)([pq])tel(_short|*)_1(-|_)500[K]*(_new|shortallele|*)_[14]_(12|3)_12(v2|*)_(hg19orientation_|*)(proximal|distal)\\/1.xml$",
replacement = "\\2", x = file_name)]
#Get subtelomere sequence extremity
subtelomere_blasts[, extremity := gsub(
pattern = "^[0-9XY]\\d*(pY|*)[pq]tel(_short|*)_1(-|_)500[K]*(_new|shortallele|*)_[14]_(12|3)_12(v2|*)_(hg19orientation_|*)(proximal|distal)\\/1.xml$",
replacement = "\\8", x = file_name)]
#Set chromosomes as factor
chrs <- c(unique(telomeres$chromosomes),"chr17")
chrs <- sort(factor(x = chrs, levels = paste0("chr", c(1:22,"X","Y"))))
#Create subtelomere bed annotation
ls.subtel <- lapply(X = chrs, function(i){
#Get subtelomere from p arm
p.dt <- subtelomere_blasts[
chromosome == i & arm == "p" & subject_frame == 1,
c("chromosome", "subject_start", "subject_end", "extremity")]
#For distal part of the sequence
if(nrow(p.dt[extremity == "distal"]) == 1){
#Check if the distal position is before all proximal positions on the p arm
if(p.dt[, .SD[which.min(subject_end)]]$extremity == "distal"){
p.start <- p.dt[extremity == "distal"]$subject_start - 1
} else { #Unexploitable alignment, get p arm telomere end position
p.start <- telomeres[chromosomes == i][1]$end
}
} else if(nrow(p.dt[extremity == "distal"]) > 1){
p.start <- min(p.dt[extremity == "distal"]$subject_start) - 1
} else {
if(nrow(telomeres[chromosomes == i]) == 0){
#Chr17 in hg19 does not have any telomere defined
p.start <- 0
} else { p.start <- telomeres[chromosomes == i][1]$end }
}
#For proximal part of the sequence
if(nrow(p.dt[extremity == "proximal"]) == 1){
p.end <- p.dt[extremity == "proximal"]$subject_end
} else if(nrow(p.dt[extremity == "proximal"]) > 1){
p.dt[extremity == "proximal", dist := abs(subject_end - p.start - 500000)]
p.end <- p.dt[extremity == "proximal", .SD[which.min(dist)]]$subject_end
# p.end <- max(p.dt[extremity == "proximal"]$subject_end)
} else { p.end <- p.start + 500000 }
#Get subtelomere from q arm
q.dt <- subtelomere_blasts[
chromosome == i & arm == "q" & subject_frame == -1,
c("chromosome", "subject_start", "subject_end", "extremity")]
#For distal part of the sequence
if(nrow(q.dt[extremity == "distal"]) == 1){
q.end <- q.dt[extremity == "distal"]$subject_start
} else if(nrow(q.dt[extremity == "distal"]) > 1){
q.end <- max(q.dt[extremity == "distal"]$subject_start)
} else {
if(nrow(telomeres[chromosomes == i]) == 0){
#Chr17 in hg19 does not have any telomere defined, set chr17 end position
q.end <- 81195210
} else { q.end <- telomeres[chromosomes == i][2]$start }
}
#For proximal part of the sequence
if(nrow(q.dt[extremity == "proximal"]) == 1){
q.start <- q.dt[extremity == "proximal"]$subject_end - 1
} else if(nrow(q.dt[extremity == "proximal"]) > 1){
q.dt[extremity == "proximal",
dist := abs(q.end - (subject_end - 1) - 500000)]
q.start <- q.dt[extremity == "proximal",
.SD[which.min(dist)]]$subject_end - 1
} else { q.start <- q.end - 500000 }
#Create chromosome subtelomeres annotation
sub.dt <- data.table("chromosome" = i, "start" = c(p.start, q.start),
"end" = c(p.end, q.end))
return(sub.dt)
})
#Get widths of subtelomeric regions
ls.subtel <- lapply(ls.subtel, function(i){i[, width := end - start]})
hg19.subtelomeric.bed <- rbindlist(ls.subtel)
hg19.subtelomeric.bed
invisible(lapply(X = chrs, function(i){
if(nrow(telomeres[chromosomes == i]) != 0){
#Remove gaps between p telomere end and subtelomere start
if(telomeres[chromosomes == i]$end[1] !=
hg19.subtelomeric.bed[chromosome == i]$start[1]){
hg19.subtelomeric.bed[chromosome == i][["start"]][1] <<- telomeres[
chromosomes == i]$end[1]
}
#Remove gaps between q subtelomere end and telomere start
if(telomeres[chromosomes == i]$start[2] !=
hg19.subtelomeric.bed[chromosome == i]$end[2]){
hg19.subtelomeric.bed[chromosome == i][["end"]][2] <<- telomeres[
chromosomes == i]$start[2]
}
}
}))
#Recompute new width of extended subtelomeric regions
hg19.subtelomeric.bed[, width := end - start]
hg19.subtelomeric.bed
NCBI_BLAST_XML2DT
subtelomere_blasts
setwd("~/Computational_Epigenomics/Subtelomeric_regions_annotation/")
Imports = c("data.table", "seqinr", "hoardeR", "NCBI.BLAST2DT")
invisible(lapply(Imports, library, character.only = T))
gaps <- fread("PCAWG_Paper/data/hg19_annotations/gap.txt.gz")
colnames(gaps)[2:4] <- c("chromosomes", "start", "end")
#Keep telomeres and centromeres
telomeres <- gaps[V8 == "telomere", c(2:4), ]
invisible(lapply(Imports, library, character.only = T))
gaps <- fread("gap.txt.gz")
colnames(gaps)[2:4] <- c("chromosomes", "start", "end")
#Keep telomeres and centromeres
telomeres <- gaps[V8 == "telomere", c(2:4), ]
#No Telomeres annotated in hg19 on chr 17:
# https://www.biostars.org/p/76193/#76324
# https://www.biostars.org/p/72730/
# https://www.ncbi.nlm.nih.gov/grc/human/issues/HG-1049
# https://www.nature.com/articles/ng0198-76
subtelomere_blasts <- fread("subtelomere_selected_BLAST_hits.csv")
subtelomere_blasts[, chromosome := gsub(
pattern = "^Homo sapiens chromosome (\\d*[0-9XY]), GRCh37.p13 Primary Assembly",
replacement = "chr\\1", x = hits_def)]
subtelomere_blasts[, arm := gsub(
pattern = "^[0-9XY]\\d*(pY|*)([pq])tel(_short|*)_1(-|_)500[K]*(_new|shortallele|*)_[14]_(12|3)_12(v2|*)_(hg19orientation_|*)(proximal|distal)\\/1.xml$",
replacement = "\\2", x = file_name)]
#Get subtelomere sequence extremity
subtelomere_blasts[, extremity := gsub(
pattern = "^[0-9XY]\\d*(pY|*)[pq]tel(_short|*)_1(-|_)500[K]*(_new|shortallele|*)_[14]_(12|3)_12(v2|*)_(hg19orientation_|*)(proximal|distal)\\/1.xml$",
replacement = "\\8", x = file_name)]
#Set chromosomes as factor
chrs <- c(unique(telomeres$chromosomes),"chr17")
chrs <- sort(factor(x = chrs, levels = paste0("chr", c(1:22,"X","Y"))))
ls.subtel <- lapply(X = chrs, function(i){
#Get subtelomere from p arm
p.dt <- subtelomere_blasts[
chromosome == i & arm == "p" & subject_frame == 1,
c("chromosome", "subject_start", "subject_end", "extremity")]
#For distal part of the sequence
if(nrow(p.dt[extremity == "distal"]) == 1){
#Check if the distal position is before all proximal positions on the p arm
if(p.dt[, .SD[which.min(subject_end)]]$extremity == "distal"){
p.start <- p.dt[extremity == "distal"]$subject_start - 1
} else { #Unexploitable alignment, get p arm telomere end position
p.start <- telomeres[chromosomes == i][1]$end
}
} else if(nrow(p.dt[extremity == "distal"]) > 1){
p.start <- min(p.dt[extremity == "distal"]$subject_start) - 1
} else {
if(nrow(telomeres[chromosomes == i]) == 0){
#Chr17 in hg19 does not have any telomere defined
p.start <- 0
} else { p.start <- telomeres[chromosomes == i][1]$end }
}
#For proximal part of the sequence
if(nrow(p.dt[extremity == "proximal"]) == 1){
p.end <- p.dt[extremity == "proximal"]$subject_end
} else if(nrow(p.dt[extremity == "proximal"]) > 1){
p.dt[extremity == "proximal", dist := abs(subject_end - p.start - 500000)]
p.end <- p.dt[extremity == "proximal", .SD[which.min(dist)]]$subject_end
# p.end <- max(p.dt[extremity == "proximal"]$subject_end)
} else { p.end <- p.start + 500000 }
#Get subtelomere from q arm
q.dt <- subtelomere_blasts[
chromosome == i & arm == "q" & subject_frame == -1,
c("chromosome", "subject_start", "subject_end", "extremity")]
#For distal part of the sequence
if(nrow(q.dt[extremity == "distal"]) == 1){
q.end <- q.dt[extremity == "distal"]$subject_start
} else if(nrow(q.dt[extremity == "distal"]) > 1){
q.end <- max(q.dt[extremity == "distal"]$subject_start)
} else {
if(nrow(telomeres[chromosomes == i]) == 0){
#Chr17 in hg19 does not have any telomere defined, set chr17 end position
q.end <- 81195210
} else { q.end <- telomeres[chromosomes == i][2]$start }
}
#For proximal part of the sequence
if(nrow(q.dt[extremity == "proximal"]) == 1){
q.start <- q.dt[extremity == "proximal"]$subject_end - 1
} else if(nrow(q.dt[extremity == "proximal"]) > 1){
q.dt[extremity == "proximal",
dist := abs(q.end - (subject_end - 1) - 500000)]
q.start <- q.dt[extremity == "proximal",
.SD[which.min(dist)]]$subject_end - 1
} else { q.start <- q.end - 500000 }
#Create chromosome subtelomeres annotation
sub.dt <- data.table("chromosome" = i, "start" = c(p.start, q.start),
"end" = c(p.end, q.end))
return(sub.dt)
})
ls.subtel <- lapply(ls.subtel, function(i){i[, width := end - start]})
hg19.subtelomeric.bed <- rbindlist(ls.subtel)
